/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UtilitiesPackage;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;

/**
 *
 * @author ateichelman
 */
public class FormUtilities {
        /**
     * EXAMPLE FORM HTML:
     * "result": 
     * "<label for=\"AssignedSection\">Assigned Section:&nbsp;</label><textarea name=\"AssignedSection\" class=\"form-control\" ></textarea><label for=\"AssignedAssignee\">Assignee:&nbsp;</label><textarea name=\"AssignedAssignee\" class=\"form-control\" ></textarea><label for=\"AssignedQAAssignee\">QA Assignee:&nbsp;</label><textarea name=\"AssignedQAAssignee\" class=\"form-control\" ></textarea><label for=\"AssignedComments\">Comments:&nbsp;</label><textarea name=\"AssignedComments\" class=\"form-control\" ></textarea>"
     * ...
     * Object actionResponse = action.execute(payload);
     * ...
     */
    
    /**
     * @description Replaces textfields in existing html string with datalist inputs.
     * @param htmlString 
     * @param targetName substring of the name attribute for each textfield to be changed.
     * @param valueList List of values to be contained in the datalist.
     */
    static public String addDatalist(String htmlString, String targetName, String[] valueList) {
        
        System.out.println("parsing doc");
        
        Document doc = Jsoup.parse(htmlString, "", Parser.xmlParser());
        
        System.out.println("parsing...");
        
        Elements targetElements = doc.select("textarea[name*='" + targetName + "']");

        if(targetElements.isEmpty()){
            System.out.println("No text areas found with " + targetName + " in their name attribute.");
        } else {
            
            targetElements.stream().map((target) -> {
                System.out.println("Found: " + target.toString());
                return target;
            }).map((target) -> {
                Attributes oldAttr = target.attributes();
                System.out.println("Old attributes: " + oldAttr.html());
                String uniqueListName = oldAttr.get("name") + "List";
                Element newInput = new Element("input");
                target.replaceWith(newInput);
                // Assign old attributes to the new element first.
                for (Attribute attrib : oldAttr ){
                    newInput.attr(attrib.getKey(), attrib.getValue());
                }
                // Then assign the new list attribute, overwriting any old list attributes.
                newInput.attr("list",uniqueListName);
                return uniqueListName;
            }).map((uniqueListName) -> {
                // append a new datalist to the bottom of the element, not to the body generated by jsoup!
                Element newDatalist = doc.appendElement("datalist");
                // set its id to match the list attribute on the new input
                newDatalist.attr("id",uniqueListName);
                return newDatalist;
            }).forEachOrdered((newDatalist) -> {
                // for each newVal, add a new child element to the datalist
                for (String newVal: valueList){
                    Element userOption = newDatalist.appendElement("option");
                    userOption.attr("value",newVal);
                }
            });


            
            
        }
        
        return doc.html();
        
    }
    
}
